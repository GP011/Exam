pragma solidity ^0.4.0;
 
contract Invoice {

    uint public amountRequired;
    address owner;

    mapping(address => uint) amountPaid;

    event DepositMade(address _who, uint _amount, uint _timestamp);
    event ContractorPaid(address _who, uint _amount, uint _timestamp);
   
    function Invoice(uint _amountRequired) {
        owner = msg.sender;
        amountRequired = _amountRequired;
    }
   
    function recieveFunds() payable returns (bool success){
      require(msg.value == amountRequired);
      amountPaid[msg.sender] += msg.value;
      DepositMade(msg.sender, msg.value, now);
      return true;
    }
  
  
    function payContractor(address _who, uint _amountToSend) returns (bool success){
        require(msg.sender == owner);                                     
        _who.transfer(_amountToSend);
    }
    
    function queryBalance(address _who) constant returns (uint _amount) {
        return amountPaid[_who];
    }
   
    function getBalance() constant returns (uint _amount){
        return this.balance;
    } 
  }
